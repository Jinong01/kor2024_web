[ DB ]
    - 데이터베이스 : 데이터들의 집합
    - 데이터베이스 종류
        1. noSQL : SQL 대신 객체지향 데이터 관리
        2. 관계형(Relational)데이터베이스* : SQL 사용하는 테이블간 관계형 데이터베이스 관리

[ DAO ]
    - Data Access Object
    - JDBC : Java Database Connection
    1. 데이터베이스 접근하여 자료들을 자바로 부터 데이터 관리하는 객체
    2. 주요 인터페이스
        1] Connection
        2] PreparedStatement
        3] ResultSet

[ ORM ]
    Object Relational Mapping - ex] myBatis / JPA
    1. 정의 : 객체지향 프로그래밍에서 사용하는 객체 와 관계형 데이터베이스에서 사용하는 테이블과 매핑(연결)해주는 기술
        즉] 자바 객체와 관계형 데이터베이스 테이블 간 매핑을 자동으로 처리해주는 기술
    2. 목적 : 개발자에게 조금 더 편리성 제공
    3. 사용처 : Java , Python

[ Hibernate ]
    1. 정의 : 자바에서 ORM 을 구현한 프레임워크, 자바 객체를 관계형 데이터베이스에 쉽게 저장/조회할 수 있도록 도와주는 라이브러리
    2. 목적 :
        1] SQL 쿼리를 자동으로 생성 해주기 때문에 편리하고, 개발자 직접 SQL 작성하지 않아도 된다. [ 빠른 개발 ]
            -> 간단한 쿼리는 자동이지만 복잡한 쿼리는 결국 직접 작성해야한다.
        2] 자동으로 타입 변환해주는 기능 제공
        3] JDBC(DAO)의 복잡함을 해결하고 간결한 코드를 이용하여 제공받은 라이브러리 빠른 개발
    3. Spring 프레임워크에서 공식적으로 지원

[ JPA ] : Java Persistence API , 인터페이스란? 추상메소드/기능     API Application Programming Interface
    1. 정의 : 자바에서 ORM 을 사용할때 표준 API, JPA 는 자바에서 객체 관계 매핑(연결)을 어떻게 처리할지 정의한 규약/규칙
        -> Hibernate 는 구현체 , JPA 는 인터페이스 : JPA 를 이용하여 Hibernate 를 사용한다.
    2. 목적 :
        1] JPA 를 이용하여 테이블의 쿼리를 생성, 트랜잭션 관리, 엔티티 정의 등등 관리할 수 있다

    ~day60(과거)
        개발자 --> DAO --> JDBC --> DB server
    day61~
        개발자 --> JPA --> Hibernate(ORM) --> DB server

[ ORM, Hibernate, JPA, DB 관계 ]
    1. ORM : 객체와 테이블간의 매핑 처리 기술
    2. Hibernate : ORM 기술을 구현한 구현(객)체 이며, 프레임워크
    3. JPA : ORM 기술의 구현체를 조작하는 인터페이스, 프레임워크
    4. DB : 실제 데이터가 저장된 서버

* 인터페이스 란? 추상메소드를 갖는 타입  ex] 리모컨
* 구현(객)체 란? 추상메소드를 구현한 클래스로 만든 객체/인스턴스  ex] TV

[ JPA 사용할 준비 ]
    1. JPA 의존성 추가
        * JPA 기본 설정하지 않으면 Spring Web 실행 불가능
    2. JPA 가 매핑할 DB 정보를 설정해야한다.
        * 설정파일의 이름이 정해져 있다. resources 폴더 -> application.properties 파일 추가

        1] spring.datasource.driverClassName = 각 DB 회사의 클래스경로
            mysql : com.mysql.cj.jdbc.Driver
            oracle : oracle.jdbc.drive.OracleDriver
        2] spring.datasource.url = 연동할 DB Server 의 URL
        3] spring.datasource.username =계정명
        4] spring.datasource.password =비밀번호

[ 엔티티 Entity ] : 개체/실체/본체
    1. 정의 : 데이터베이스 테이블과 1:1로 매핑(연결) 되는 클래스
        --> 테이블 ==> 클래스 , 레코드 ==> 엔티티(인스턴스)
        --> 클래스 1개당 테이블 1개 , 인스턴스 1개당 레코드 1개
        --> 클래스를 만들고 엔티티설정 : DB 의 테이블 생성과 같은 의미

    2. 엔티티 클래스 정의하는 방법
        @Entity : 클래스 위에 어노테이션 작성하기
            * 관례적으로 테이블 1개당 pk는 1개 이상
            * pk 설정을 하지않으면 오류 발생
        @Id : 해당하는 필드/멤버변수를 primary key 정의한다.
        @Column : 해당하는 필드/멤버변수를 테이블 열(속성/필드)로 정의한다.

    3. 엔티티와 테이블 어떻게 처리할지 설정옵션
        spring.jpa.hibernate.ddl-auto = create/update/none/create-drop/validate

    4. 엔티티를 조작할 인터페이스 정의하는 방법
        1] @Repository : 스프링 컨테이너에 빈 주입하고 mvc 패턴의 Repository 담당
                      ( 스프링 메모리에 객체를 생성하고)
        2] extends JpaRepository<조작할 엔티티클래스명 , PK 필드의 Java 타입>
            * <> : 제네릭타입, 기본타입 불가능

클래스 : 인스턴스를 만들기 위한 객체 설계도
인스턴스 : 클래스 기반으로 생성된 실체물
테이블 : 행과 열로 이루어진 표/테이블
레코드 : 행(row) 단위의 자료
속성/필드 : 열(column) 단위의 자료

